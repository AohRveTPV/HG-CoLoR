#!/bin/bash

#Prints a help message
function print_help {
	echo "Usage: $0 [options] --longreads LR.fasta --shortreads SR.fastq --out result.fasta --tmpdir tmp_directory"
	echo ""
	echo "Note: HG-CoLoR default parameters are adapted for a 50x coverage set of short reads with a 1% error rate."
	echo "Please modify the parameters, in particular the --solid and --bestn ones, as indicated below if using a set of short reads with a much higher coverage and/or a highly different error rate."
	echo ""
	echo "	Input:"
	echo "	LR.fasta:	fasta file of long reads, one sequence per line."
	echo "	SR.fastq:	fastq file of short reads."
	echo "			Warning: only one file must be provided."
	echo "			If using paired reads, please concatenate them into one single file."
	echo "			It is recommended to run HG-CoLoR with a 50x coverage of short reads."
	echo "			Results quality tends to drop with a higher coverage."
	echo "	result.fasta:	fasta file where to output the corrected long reads."
	echo "	tmp_directoty:	directory where to store the temporary files."
	echo ""
	echo "	Options:"
	echo "	--maxorder:	Maximum order of the variable-order de Buijn graph (default: 100)."
	echo "	--solid:	Minimum number of occurrences to consider a k-mer as solid, after short reads correction (default: 1)."
	echo "			This parameter should be carefully raised accordingly to the short reads coverage and accuracy,"
	echo "			and to the chosen maximum order of the graph."
	echo "	--seedsoverlap:	Minimum overlap length to allow the merging of two overlapping seeds (default: maxorder - 1)."
	echo "	--minorder:	Minimum order of the variable-order de Bruijn graph (default: maxorder / 2)."
	echo "	--branches:	Maximum number of branches exploration (default: 1,500)."
	echo "			Raising this parameter will result in less split corrected long reads."
	echo "			However, it will also increase the runtime, and may create chimeric linkings between the seeds."
	echo "	--seedskips:	Maximum number of seed skips (default: 5)."
	echo "	--mismatches:	Allowed mismatches when attempting to link two seeds together (default: 3)."
	echo "	--bestn:	Top alignments to be reported by BLASR (default: 50)."
	echo "			This parameter should be raised accordingly to the short reads coverage."
	echo "			Its default value is adapted for a 50x coverage of short reads."
	echo "	--kmcmem: 	Maximum amount of RAM for KMC, in GB (default: 12)."
	echo "	--nproc:	Number of processes to run in parallel (default: number of cores)."
	echo "	--help:		Print this help message."
	exit 1
}

#Set options to default values
longreads=""
LR=""
shortreads=""
SR=""
K=100
seedsoverlap=0
k=0
solid=1
branches=1500
seedskips=5
mismatches=3
bestn=50
kmcmem="12"
nproc=$(nproc)
tmpdir=""
out=""

#Print help if no argument specified
if [[ "$1" == "" ]] ; then
	print_help
fi

#Otions handling
while [[ "$1" != "" ]] ; do
	case "$1" in
		"--help")
			print_help ;;
		"--longreads")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) longreads="$2" ; LR=$(basename "$2") ; shift 2 ;;
			esac;;
		"--shortreads")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) shortreads="$2" ; SR=$(basename "$2") ; shift 2 ;;
			esac ;;
		"--out")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) out="$2" ; shift 2 ;;
			esac ;;
		"--tmpdir")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) tmpdir="$2" ; shift 2 ;;
			esac ;;
		"--maxorder")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) K="$2" ; shift 2 ;;
			esac ;;
		"--solid")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) solid="$2" ; shift 2 ;;
			esac ;;
		"--seedsoverlap")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) seedsoverlap="$2" ; shift 2 ;;
			esac ;;
		"--minorder")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) k="$2" ; shift 2 ;;
			esac ;;
		"--branches")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) branches="$2" ; shift 2 ;;
			esac ;;
		"--seedskips")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) seedskips="$2" ; shift 2 ;;
			esac ;;
		"--mismatches")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) mismatches="$2" ; shift 2 ;;
			esac ;;
		"--bestn")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) bestn="$2" ; shift 2 ;;
			esac ;;
		"--nproc")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) nproc="$2" ; shift 2 ;;
			esac ;;
		"--kmcmem")
			case "$2" in
				"") echo "Error: $1 expects an argument" ; exit 1 ;;
				*) jfhash="$2" ; shift 2 ;;
			esac ;;
    		--)
			shift ; break ;;
    		*)
			echo "Error: invalid option \"$1\"" ; exit 1 ;;
  	esac
done

#If seedsoverlap or minorder haven't been set, set them to default values
if [[ $seedsoverlap -eq 0 ]] ; then
	seedsoverlap=$((K-1))
fi
if  [[ $k -eq 0 ]] ; then
	k=$((K/2))
fi

#Exit if no short reads, no long reads, no temporary directory, or no output files have been specified
if [[ $LR == "" ]] ; then
	echo "Error: --longreads must be specified";
	exit 1;
fi
if [[ $SR == "" ]] ; then
	echo "Error: --shortreads must be specified";
	exit 1;
fi
if [[ $out == "" ]] ; then
	echo "Error: --out must be specified";
	exit 1;
fi
if [[ $tmpdir = "" ]] ; then
	echo "Error: --tmpdir must be specified";
	exit 1;
fi

#Remove the output file if it already exists
if [[ -f $out ]] ; then
	rm $out
fi

#Create the directory for temporary files, if it does not exist
if [[ ! -d $tmpdir ]] ; then
        mkdir $tmpdir
fi

#Create the subdirectory for alignments files, if it does not exist
if [[ ! -d $tmpdir/Alignments ]] ; then
	mkdir $tmpdir/Alignments
fi

#Temporary files names
aln="SR_on_LR.sam"
seeds="seeds"
formatLR="formatted_LR.fa"

#Get the path to HG-CoLoR's folder
hgs=$(readlink -f "$0")
hgf=$(dirname $hgs)

#Run the correction pipeline
echo "["$(date)"] Correcting the short reads"
echo "----- QuorUM -----" >> HG-CoLoR.stdout
echo "----- QuorUM -----" >> HG-CoLoR.stderr
quorum --prefix $tmpdir/corrected_SR -q 33 -t "$nproc" "$shortreads" >> HG-CoLoR.stdout 2>> HG-CoLoR.stderr

echo "["$(date)"] Removing short reads containing weak K-mers"
$hgf/bin/filterShortReads.py $tmpdir/corrected_SR.fa "$K" > $tmpdir/long_corrected_SR.fa
echo "----- revseq -----" >> HG-CoLoR.stdout
echo "----- revseq -----" >> HG-CoLoR.stderr
revseq $tmpdir/long_corrected_SR.fa -reverse -complement -outseq $tmpdir/RC_long_corrected_SR.fa >> HG-CoLoR.stdout 2>> HG-CoLoR.stderr
sed -i ':a; $!N; /^>/!s/\n\([^>]\)/\1/; ta; P; D' $tmpdir/RC_long_corrected_SR.fa
cat $tmpdir/long_corrected_SR.fa $tmpdir/RC_long_corrected_SR.fa > $tmpdir/all_long_corrected_SR.fa
echo "----- KMC -----" >> HG-CoLoR.stdout
echo "----- KMC -----" >> HG-CoLoR.stderr
kmc -m"$kmcmem" -k"$K" -ci"$solid" -b -fa $tmpdir/all_long_corrected_SR.fa $tmpdir/mers.db $tmpdir >> HG-CoLoR.stdout 2>> HG-CoLoR.stderr
echo "----- KMC_tools -----" >> HG-CoLoR.stdout
echo "----- KMC_tools -----" >> HG-CoLoR.stderr
kmc_tools filter $tmpdir/mers.db -ci"$solid" $tmpdir/long_corrected_SR.fa -ci1.0 -fa $tmpdir/good_long_corrected_SR.fa -fa >> HG-CoLoR.stdout 2>> HG-CoLoR.stderr
rm $tmpdir/long_corrected_SR.fa $tmpdir/RC_long_corrected_SR.fa $tmpdir/all_long_corrected_SR.fa $tmpdir/corrected_SR.fa

echo "["$(date)"] Building the graph"
echo "----- KMC_dump -----" >> HG-CoLoR.stdout
echo "----- KMC_dump -----" >> HG-CoLoR.stderr
kmc_dump -ci"$solid" $tmpdir/mers.db $tmpdir/"dumped_$K-mers" >> HG-CoLoR.stdout 2>> HG-CoLoR.stderr
cut -f 1 $tmpdir/"dumped_$K-mers" > $tmpdir/"$K-mers.fa"
echo "----- PgSAgen -----" >> HG-CoLoR.stdout
echo "----- PgSAgen -----" >> HG-CoLoR.stderr
$hgf/bin/PgSAgen $tmpdir/"$K-mers.fa" $tmpdir/"$K-mers.fa" >> HG-CoLoR.stdout 2>> HG-CoLoR.stderr

echo "["$(date)"] Aligning the short reads on the long reads"
$hgf/bin/formatLongReads.py "$longreads" > $tmpdir/"$formatLR"
echo "----- blasr -----" >> HG-CoLoR.stderr
$hgf/bin/blasr $tmpdir/good_long_corrected_SR.fa $tmpdir/"$formatLR" --nproc "$nproc" -m 6 --minAlnLength "$K" --bestn "$bestn" > $tmpdir/"$aln" 2>> HG-CoLoR.stderr
echo "["$(date)"] Removing short alignments"
sort -T $tmpdir/ -k 3 $tmpdir/"$aln" > $tmpdir/"tmp_$aln"
mv $tmpdir/"tmp_$aln" $tmpdir/"$aln"
$hgf/bin/filterOutShortAlignments.py $tmpdir/"$aln" "$K" $tmpdir/Alignments/
rm $tmpdir/"$aln"
ls $tmpdir/Alignments/ > $tmpdir/"$seeds"

echo "["$(date)"] Generating the corrected long reads"
$hgf/bin/CLRgen -t "$tmpdir" -K "$K" -o "$seedsoverlap" -k "$k" -b "$branches" -s "$seedskips" -j "$nproc" $tmpdir/"$K-mers.fa.pgsa" > "$out"

echo "["$(date)"] Removing temporary files"
rm -Rf $tmpdir

echo "["$(date)"] Exiting"
